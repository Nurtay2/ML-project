# app.py

import os
import json
import io
import requests
import pandas as pd
import streamlit as st
import docx

# -----------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX –∏ API
# -----------------------------

def extract_text_from_docx(file):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX-—Ñ–∞–π–ª–∞ (file –º–æ–∂–µ—Ç –±—ã—Ç—å —à–ª—è—Ö–æ–º –∫ —Ñ–∞–π–ª—É –∏–ª–∏ file-like-–æ–±—ä–µ–∫—Ç–æ–º),
    –æ–±—ä–µ–¥–∏–Ω—è—è –Ω–µ–ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
    """
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∫ –ø—É—Ç—å
    try:
        doc = docx.Document(file)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å DOCX: {e}")
        return ""
    paragraphs = [p.text.strip() for p in doc.paragraphs if p.text.strip()]
    return "\n".join(paragraphs)


def generate_task_json(document_text: str, student_name: str, role_ru: str, api_key: str, model: str = "mistral-small"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Mistral API, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞ —Å —à–µ—Å—Ç—å—é –ø–æ–ª—è–º–∏:
      {
        "title": "<–∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª–æ–≤>",
        "description": "<–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º>",
        "status": "Todo",
        "role": "<—Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º>",
        "executor": "<–ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞>",
        "author": "AI"
      }
    """
    if not api_key:
        raise ValueError("API-–∫–ª—é—á Mistral –Ω–µ –∑–∞–¥–∞–Ω.")

    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ JSON
    system_prompt = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
        "–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç (–Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π) —Å —Ç–æ—á–Ω–æ —à–µ—Å—Ç—å—é –ø–æ–ª—è–º–∏:\n"
        "  {\n"
        "    \"title\": \"<–∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª–æ–≤, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤>\",\n"
        "    \"description\": \"<–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Ä—É—Å—Å–∫–æ–º>\",\n"
        "    \"status\": \"Todo\",\n"
        "    \"role\": \"<—Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –Ω–∞–ø—Ä. –ê–Ω–∞–ª–∏—Ç–∏–∫>\",\n"
        "    \"executor\": \"<–ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞>\",\n"
        "    \"author\": \"AI\"\n"
        "  }\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
        "- title: –Ω–µ –±–æ–ª–µ–µ –ø—è—Ç–∏ —Å–ª–æ–≤, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –≤–Ω—É—Ç—Ä–∏, –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫.\n"
        "- description: –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, –Ω–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ '\\n' –≤–Ω—É—Ç—Ä–∏.\n"
        "- status –≤—Å–µ–≥–¥–∞ \"Todo\".\n"
        "- role ‚Äî —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n"
        "- executor ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
        "- author ‚Äî —Å—Ç—Ä–æ–∫–∞ \"AI\".\n"
        "–ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π, –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¢–ó, –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Ä–æ–ª—å—é
    user_prompt = (
        f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{document_text}\n\n"
        f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
        f"–†–æ–ª—å: {role_ru}\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏ JSON —Å –∑–∞–¥–∞—á–µ–π."
    )

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user",   "content": user_prompt}
        ]
    }

    response = requests.post(url, json=payload, headers=headers, timeout=60)
    response.raise_for_status()

    raw_text = response.json()["choices"][0]["message"]["content"].strip()

    # –†–∞–∑–±–æ—Ä JSON
    try:
        data = json.loads(raw_text)
    except json.JSONDecodeError as e:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç LLM –¥–ª—è {student_name}:\n{raw_text}\n–û—à–∏–±–∫–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    required_fields = {"title", "description", "status", "role", "executor", "author"}
    if not required_fields.issubset(set(data.keys())):
        raise ValueError(f"–í JSON –¥–ª—è {student_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n{raw_text}")

    return data


# -----------------------------
# Streamlit UI
# -----------------------------

st.set_page_config(
    page_title="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Mistral.ai",
    layout="wide"
)

st.title("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (Mistral.ai + Streamlit)")
st.markdown(
    """
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è**:
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Ä–æ–ª—è–º–∏ (–µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ).
    3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –¥–ª—è Mistral.ai (–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è `MISTRAL_API_KEY`).
    4. –ù–∞–∂–º–∏—Ç–µ **¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏¬ª** –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    5. –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π CSV —Å –ø–æ–ª—è–º–∏:
       `–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`, `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏`, `–°—Ç–∞—Ç—É—Å`, `–†–æ–ª—å`, `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å`, `–ê–≤—Ç–æ—Ä`.
    """
)


with st.expander("–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV (students_roles_random.csv)"):
    st.code(
        """student_name,role
–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤,Analyst
–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞,Tester
–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤,Manager
–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞,Designer
""", language="csv"
    )

# --- 1. –í–≤–æ–¥ API-–∫–ª—é—á–∞ ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
api_key_input = st.sidebar.text_input(
    "API-–∫–ª—é—á Mistral.ai",
    value=os.getenv("MISTRAL_API_KEY", ""),
    type="password",
    help="–ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å, –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è MISTRAL_API_KEY"
)

model_choice = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Mistral",
    options=["mistral-small", "mistral-base", "mistral-large"],
    index=0,
    help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ Mistral.ai"
)

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")
col1, col2 = st.columns(2)

with col1:
    uploaded_docx = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º",
        type=["docx"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫"
    )

with col2:
    uploaded_csv = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏",
        type=["csv"],
        help="CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ `student_name,role`. –ü—Ä–∏–º–µ—Ä —Å–º. –≤—ã—à–µ."
    )

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
generate_button = st.button("‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏")

# -----------------------------
# –õ–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏"
# -----------------------------
if generate_button:
    if not uploaded_docx:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¢–ó.")
    elif not uploaded_csv:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏.")
    else:
        # –ë–µ—Ä—ë–º API-–∫–ª—é—á
        api_key = api_key_input.strip() or os.getenv("MISTRAL_API_KEY", "")
        if not api_key:
            st.error("‚ùó API-–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        else:
            # -----------------------------
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOCX
            # -----------------------------
            with st.spinner("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOCX..."):
                try:
                    # streamlit file_uploader –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç io.BytesIO
                    # –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                    document_text = extract_text_from_docx(uploaded_docx)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DOCX: {e}")
                    document_text = ""

            if not document_text:
                st.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX.")
            else:
                # -----------------------------
                # –ß–∏—Ç–∞–µ–º CSV —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                # -----------------------------
                with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–ª–µ–π..."):
                    try:
                        df_students = pd.read_csv(uploaded_csv)
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {e}")
                        df_students = pd.DataFrame()

                if df_students.empty or "student_name" not in df_students.columns or "role" not in df_students.columns:
                    st.error("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ `student_name` –∏ `role`.")
                else:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
                    role_mapping = {
                        "Analyst":  "–ê–Ω–∞–ª–∏—Ç–∏–∫",
                        "Tester":   "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                        "Manager":  "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                        "Designer": "–î–∏–∑–∞–π–Ω–µ—Ä"
                    }
                    df_students["role_ru"] = df_students["role"].map(lambda r: role_mapping.get(r, r))

                    # -----------------------------
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
                    # -----------------------------
                    st.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Mistral.ai")
                    progress_bar = st.progress(0)
                    total = len(df_students)
                    results = []
                    errors = []

                    for idx, row in df_students.iterrows():
                        student_name = str(row["student_name"]).strip()
                        role_ru = str(row["role_ru"]).strip()

                        try:
                            task_json = generate_task_json(
                                document_text=document_text,
                                student_name=student_name,
                                role_ru=role_ru,
                                api_key=api_key,
                                model=model_choice
                            )
                            results.append(task_json)
                        except Exception as e:
                            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥
                            errors.append(f"{student_name} ({role_ru}): {e}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progress_bar.progress((idx + 1) / total)

                    # -----------------------------
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    # -----------------------------
                    st.success(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –∏–∑ {total} –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                    if errors:
                        with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"):
                            for err in errors:
                                st.write(f"- {err}")

                    if results:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
                        df_out = pd.DataFrame(results)
                        df_out = df_out.rename(columns={
                            "title":       "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            "status":      "–°—Ç–∞—Ç—É—Å",
                            "role":        "–†–æ–ª—å",
                            "executor":    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                            "author":      "–ê–≤—Ç–æ—Ä"
                        })

                        st.dataframe(df_out)

                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                        csv_bytes = df_out.to_csv(index=False, encoding="utf-8-sig").encode("utf-8-sig")
                        st.download_button(
                            label="‚¨á –°–∫–∞—á–∞—Ç—å CSV —Å –∑–∞–¥–∞—á–∞–º–∏",
                            data=csv_bytes,
                            file_name="tasks_output.csv",
                            mime="text/csv"
                        )
                    else:
                        st.warning("‚ùó –ù–∏ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

# -----------------------------
# –ü–æ–¥–≤–∞–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
# -----------------------------
st.markdown("---")
st.markdown(
    """
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã**:
    - –ï—Å–ª–∏ –≤–∞—à API-–∫–ª—é—á –¥–ª—è Mistral.ai –±–æ–ª—å—à–æ–π –∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é, 
      –ø—Ä–æ—Å—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Streamlit:
      
      ```
      export MISTRAL_API_KEY="–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å"
      streamlit run app.py
      ```
    - –§—É–Ω–∫—Ü–∏—è `extract_text_from_docx` –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤. –ï—Å–ª–∏ –≤ –≤–∞—à–µ–º DOCX –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äî –∏—Ö –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
    - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–¥–µ–ª—å `mistral-small` –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, `mistral-base`).
    - –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–æ–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 
      —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –±—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ.
    """
)
