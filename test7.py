import os
import json
import io
import re
import requests
import pandas as pd
import streamlit as st
import docx

STATUS_CHOICES = ['new', 'in_progress', 'completed', 'cancelled']
PRIORITY_CHOICES = ['low', 'medium', 'high', 'critical']

def extract_text_from_docx(file):
    try:
        doc = docx.Document(file)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å DOCX: {e}")
        return ""
    paragraphs = [p.text.strip() for p in doc.paragraphs if p.text.strip()]
    return "\n".join(paragraphs)

def normalize_json_result(data, student_name, role_ru):
    if not isinstance(data, dict):
        raise ValueError(f"–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç–æ–º –¥–ª—è {student_name}")
    data["role"] = str(role_ru)
    data["executor"] = str(student_name)
    data["author"] = "AI"
    if data.get("status") not in STATUS_CHOICES:
        data["status"] = "new"
    if data.get("priority") not in PRIORITY_CHOICES:
        data["priority"] = "medium"
    for key in ["title", "description"]:
        if isinstance(data.get(key), str):
            data[key] = data[key].replace('\n', ' ').replace('\r', ' ').strip()
    return data

def extract_json_from_text(text):
    match = re.search(r'({.*})', text, re.DOTALL)
    if match:
        return match.group(1)
    return text

CACHE = {}

def cache_key(document_text, student_name, role_ru, model):
    import hashlib
    key_base = f"{document_text[:1000]}||{student_name}||{role_ru}||{model}"
    return hashlib.md5(key_base.encode("utf-8")).hexdigest()

def generate_task_json(document_text, student_name, role_ru, api_key, model="mistral-small", used_titles=None):
    # –ù–æ–≤—ã–π system_prompt —Å —É—á—ë—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ä–æ–ª–µ–π
    system_prompt = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –≤ –∫–æ–º–∞–Ω–¥–µ. "
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–º–µ–Ω–Ω–æ –¥–ª—è –µ–≥–æ —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–∞–ª–∏—Ç–∏–∫, –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫, –ú–µ–Ω–µ–¥–∂–µ—Ä, –î–∏–∑–∞–π–Ω–µ—Ä). "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Ä–æ–ª–∏:\n"
        "- –ê–Ω–∞–ª–∏—Ç–∏–∫: –∑–∞–¥–∞—á–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –¢–ó, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.\n"
        "- –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫: –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤, –ø–æ–∏—Å–∫—É –±–∞–≥–æ–≤, –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö.\n"
        "- –ú–µ–Ω–µ–¥–∂–µ—Ä: –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏, –∫–æ–Ω—Ç—Ä–æ–ª—é —Å—Ä–æ–∫–æ–≤, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∑–∞–¥–∞—á.\n"
        "- –î–∏–∑–∞–π–Ω–µ—Ä: –∑–∞–¥–∞—á–∏ –ø–æ –º–∞–∫–µ—Ç–∞–º, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞–º, UI/UX, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
        "–û—Ç–≤–µ—Ç ‚Äî —Å—Ç—Ä–æ–≥–æ –û–î–ò–ù JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥. –ü–æ–ª—è:\n"
        "{"
        "\"title\": \"–ö–æ—Ä–æ—Ç–∫–æ, –¥–æ 5 —Å–ª–æ–≤\","
        "\"description\": \"–ü–æ–¥—Ä–æ–±–Ω–æ–µ, –±–µ–∑ \\n, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º\","
        "\"status\": \"new | in_progress | completed | cancelled\","
        "\"priority\": \"low | medium | high | critical\","
        "\"role\": \"—Ä–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º\","
        "\"executor\": \"–ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞\","
        "\"author\": \"AI\""
        "}\n"
        "–ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω JSON. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏, –æ—Å–æ–±–µ–Ω–Ω–æ title –∏ description."
    )
    user_prompt = (
        f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{document_text}\n\n"
        f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
        f"–†–æ–ª—å: {role_ru}\n"
        "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏. "
        "–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π (–Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏), —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–Ω–Ω–æ–π. "
        "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON. –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞!"
    )
    # –ú–µ–º–æ-–∫—ç—à
    key = cache_key(document_text, student_name, role_ru, model)
    if key in CACHE:
        return CACHE[key]
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user",   "content": user_prompt}
        ]
    }
    response = requests.post(url, json=payload, headers=headers, timeout=90)
    response.raise_for_status()
    raw_text = response.json()["choices"][0]["message"]["content"].strip()
    raw_json = extract_json_from_text(raw_text)
    try:
        data = json.loads(raw_json)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ JSON –¥–ª—è {student_name}:\n{raw_text}\n–û—à–∏–±–∫–∞: {e}")
    data = normalize_json_result(data, student_name, role_ru)
    # –î–µ–ª–∞–µ–º title —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –µ—Å–ª–∏ –Ω–∞–¥–æ
    if used_titles is not None:
        title_key = (data["title"], data["description"])
        if title_key in used_titles:
            # –î–æ–±–∞–≤–∏–º —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –∫ title
            data["title"] = f"{data['title']} [{role_ru}]"
        used_titles.add((data["title"], data["description"]))
    CACHE[key] = data
    return data

# ---- Streamlit UI ----

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Mistral.ai", layout="wide")
st.title("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (Mistral.ai + Streamlit)")

st.markdown("""
**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è**:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º.
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Ä–æ–ª—è–º–∏.
3. –£–∫–∞–∂–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è Mistral.ai.
4. –ù–∞–∂–º–∏—Ç–µ **¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏¬ª**.
""")

with st.expander("–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CSV"):
    st.code(
        """student_name,role
–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤,Analyst
–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞,Tester
–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤,Manager
–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞,Designer
""", language="csv"
    )

st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
api_key_input = st.sidebar.text_input("API-–∫–ª—é—á Mistral.ai", value=os.getenv("MISTRAL_API_KEY", ""), type="password")
model_choice = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Mistral", options=["mistral-small", "mistral-base", "mistral-large"], index=0)

st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")
col1, col2 = st.columns(2)

with col1:
    uploaded_docx = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º", type=["docx"])
with col2:
    uploaded_csv = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏", type=["csv"])

generate_button = st.button("‚ñ∂ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏")

if generate_button:
    if not uploaded_docx:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ DOCX —Ñ–∞–π–ª —Å –¢–ó.")
    elif not uploaded_csv:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏.")
    else:
        api_key = api_key_input.strip() or os.getenv("MISTRAL_API_KEY", "")
        if not api_key:
            st.error("‚ùó API-–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        else:
            with st.spinner("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOCX..."):
                try:
                    document_text = extract_text_from_docx(uploaded_docx)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DOCX: {e}")
                    document_text = ""
            if not document_text:
                st.error("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX.")
            else:
                with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–ª–µ–π..."):
                    try:
                        df_students = pd.read_csv(uploaded_csv)
                    except Exception as e:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV: {e}")
                        df_students = pd.DataFrame()
                if df_students.empty or "student_name" not in df_students.columns or "role" not in df_students.columns:
                    st.error("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ `student_name` –∏ `role`.")
                else:
                    role_mapping = {
                        "Analyst":  "–ê–Ω–∞–ª–∏—Ç–∏–∫",
                        "Tester":   "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                        "Manager":  "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                        "Designer": "–î–∏–∑–∞–π–Ω–µ—Ä"
                    }
                    df_students["role_ru"] = df_students["role"].map(lambda r: role_mapping.get(r, r))
                    st.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Mistral.ai")
                    progress_bar = st.progress(0)
                    total = len(df_students)
                    results = []
                    errors = []
                    used_titles = set()
                    for idx, row in df_students.iterrows():
                        student_name = str(row["student_name"]).strip()
                        role_ru = str(row["role_ru"]).strip()
                        try:
                            task_json = generate_task_json(
                                document_text=document_text,
                                student_name=student_name,
                                role_ru=role_ru,
                                api_key=api_key,
                                model=model_choice,
                                used_titles=used_titles
                            )
                            results.append(task_json)
                        except Exception as e:
                            errors.append(f"{student_name} ({role_ru}): {e}")
                        progress_bar.progress((idx + 1) / total)
                    st.success(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –∏–∑ {total} –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                    if errors:
                        with st.expander("–û—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"):
                            for err in errors:
                                st.write(f"- {err}")
                    if results:
                        df_out = pd.DataFrame(results)
                        df_out = df_out.rename(columns={
                            "title":       "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                            "status":      "–°—Ç–∞—Ç—É—Å",
                            "priority":    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                            "role":        "–†–æ–ª—å",
                            "executor":    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                            "author":      "–ê–≤—Ç–æ—Ä"
                        })
                        st.dataframe(df_out)
                        csv_bytes = df_out.to_csv(index=False, encoding="utf-8-sig").encode("utf-8-sig")
                        st.download_button(
                            label="‚¨á –°–∫–∞—á–∞—Ç—å CSV —Å –∑–∞–¥–∞—á–∞–º–∏",
                            data=csv_bytes,
                            file_name="tasks_output.csv",
                            mime="text/csv"
                        )
                    else:
                        st.warning("‚ùó –ù–∏ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
# Streamlit app for generating tasks using Mistral.ai
# This code is a Streamlit application that allows users to generate tasks for students based on a technical document and a list of students with their roles.